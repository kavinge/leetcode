/*
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

For example,
Given the following matrix:

[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
You should return [1,2,3,6,9,8,7,4,5].
*/

#include <iostream>
#include <vector>
using namespace std;

vector<int> result;

vector<int> spiralOrder(vector<vector<int> > &matrix) {
    result.clear();
    int m=matrix.size();
    if(m==0) return result;
    int n=matrix[0].size();
    if(n==0) return result;
    int level=min(m+1,n+1)/2;
    for(int l=0;l<level;l++){
        int i;
        for(i=l;i<=n-l-1;i++){
            result.push_back(matrix[l][i]);
        }
        if((m-2*l)<2){
            continue;
        }
        for(i=l+1;i<=m-l-1;i++){
            result.push_back(matrix[i][n-l-1]);
        }
        if((n-2*l)<2) continue;
        for(i=n-l-2;i>=l;i--){
            result.push_back(matrix[m-l-1][i]);
        }
        if((m-2*l)>2){
            for(i=m-l-2;i>=l+1;i--){
                result.push_back(matrix[i][l]);
            }
        }
    }
    return result;
}

