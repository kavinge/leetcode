/*
You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
*/

#include <iostream>

using namespace std;

struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
        int sum=0,carry=0;
        ListNode *root=NULL,*pre=NULL,*temp=NULL;
        while(l1!=NULL||l2!=NULL||carry!=0){
            sum=carry;
            if(l1!=NULL){
                sum+=l1->val;
                l1=l1->next;
            }
            if(l2!=NULL){
                sum+=l2->val;
                l2=l2->next;
            }
            if(sum>9){
                carry=1;
                sum-=10;
            }else{
                carry=0;
            }
            temp=new ListNode(sum);
            if(pre==NULL){
                root=pre=temp;
            }else{
                pre->next=temp;
                pre=temp;
            }
        }
        return root;
        
    }
};


// 使用指向指针的指针避免pre指针
class Solution {
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
        int sum=0,carry=0;
        ListNode *result=NULL,**temp=&result;
        while(l1!=NULL||l2!=NULL||carry!=0){
            sum=carry;
            if(l1!=NULL){
                sum+=l1->val;
                l1=l1->next;
            }
            if(l2!=NULL){
                sum+=l2->val;
                l2=l2->next;
            }
            if(sum>9){
                carry=1;
                sum-=10;
            }else{
                carry=0;
            }
            *temp=new ListNode(sum);
            temp=&(*temp)->next;
        }
        return result;
        
    }
};
