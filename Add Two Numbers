/*
You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
*/

#include <iostream>

using namespace std;

struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};

ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
    ListNode* result=NULL;
    int carry=0,temp;
    ListNode* pre=NULL;
    while(l1!=NULL&&l2!=NULL){
        temp=l1->val+l2->val+carry;
        if(pre==NULL){
            result=new ListNode(temp%10);
            pre=result;
        }else{
            pre->next=new ListNode(temp%10);
            pre=pre->next;
        }
        carry=temp/10;
        l1=l1->next;
        l2=l2->next;
    }
    while(l1!=NULL){
        temp=l1->val+carry;
        if(pre==NULL){
            result=new ListNode(temp%10);
            pre=result;
        }else{
            pre->next=new ListNode(temp%10);
            pre=pre->next;
        }
        carry=temp/10;
        l1=l1->next;

    }
    while(l2!=NULL){
        temp=l2->val+carry;
        if(pre==NULL){
            result=new ListNode(temp%10);
            pre=result;
        }else{
            pre->next=new ListNode(temp%10);
            pre=pre->next;
        }
        carry=temp/10;
        l2=l2->next;

    }
    if(carry>0){
        if(pre==NULL){
            result=new ListNode(carry);
            pre=result;
        }else{
            pre->next=new ListNode(carry);

        }
    }
    return result;

}
