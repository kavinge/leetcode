/*
Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?

Write a function to determine if a given target is in the array.
*/

#include <iostream>
using namespace std;

int helper(int A[],int left,int right,int target){
     if(left>right) return false;
     int middle=(left+right)/2;
     if(A[middle]==target){
        return true;
     }else if(A[middle]>target){
         if(A[left]>=A[right]&&A[middle]>=A[left]&&target<=A[right]){
            if(A[left]==A[right]) return helper(A,middle+1,right,target)||helper(A,left,middle-1,target);
            return helper(A,middle+1,right,target);
         }else{
            return helper(A,left,middle-1,target);
         }
     }else{
        if(A[left]>=A[right]&&A[middle]<=A[right]&&target>A[right]){
            if(A[left]==A[right]) return helper(A,left,middle-1,target)||helper(A,middle+1,right,target);
            return helper(A,left,middle-1,target);
        }else{
            return helper(A,middle+1,right,target);
        }
     }
}

bool search(int A[], int n, int target) {
    if(n==0) return false;
    return helper(A,0,n-1,target);
}
