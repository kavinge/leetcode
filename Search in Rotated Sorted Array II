/*
Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?

Write a function to determine if a given target is in the array.
*/

class Solution {
public:
    bool search(int A[], int n, int target) {
        int left = 0,  right = n-1;
        while(left<=right){
            int middle = (left+right)>>1;
            if(A[middle]==target) return true;
            if(A[left]==A[right]){
                for(int i=left; i<=right; i++){
                    if(A[i]==target) return true;
                }
                return false;
            }
            if(A[middle]<target){
                if(A[left]>A[right]&&A[middle]<=A[right]&&A[left]<=target){
                    right = middle - 1;
                }else{
                    left = middle + 1;
                }
            }else{
                if(A[left]>A[right]&&A[middle]>=A[left]&&A[right]>=target){
                    left = middle + 1;
                }else{
                    right = middle - 1;
                }
            }
        }
        return false;
        
    }
};
