/*
Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character
*/

class Solution {
public:
    int minDistance(string word1, string word2) {
        int l1=word1.length();
        int l2=word2.length();
        int **dp=new int*[l1+1];
        for(int i=0;i<=l1;i++){
            dp[i]=new int[l2+1]();
            dp[i][0]=i;
        }
        for(int j=0;j<=l2;j++){
            dp[0][j]=j;
        }
        for(int i=1;i<=l1;i++){
            for(int j=1;j<=l2;j++){
                dp[i][j]=(word1[i-1]==word2[j-1]?dp[i-1][j-1]:min(min(dp[i-1][j],dp[i-1][j-1]),dp[i][j-1])+1);
            }
        }
        int count=dp[l1][l2];
        delete[] dp;
        return count;
    }
};
