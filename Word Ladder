/**
Given two words (start and end), and a dictionary, find all shortest transformation sequence(s) from start to end, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the dictionary
For example,

Given:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]

Return

  [
    ["hit","hot","dot","dog","cog"],
    ["hit","hot","lot","log","cog"]
  ]
Note:

All words have the same length.
All words contain only lowercase alphabetic characters.
**/

class Solution {
public:
    int ladderLength(string start, string end, unordered_set<string> &dict) {
        if(start == end) return 1;
        dict.erase(start);
        dict.insert(end);
        queue<pair<string,int> > cu;
        cu.push(make_pair(start,1));
        while(!cu.empty()){
            pair<string,int> current = cu.front();
            cu.pop();
            string current_str = current.first;
            for(int i = 0; i<current_str.length(); i++){
                char recover = current_str[i];
                for(int j = 0; j<26; j++){
                    current_str[i] = 'a' + j; 
                    if(dict.count(current_str)>0){
                        if(current_str == end) return current.second + 1;
                        cu.push(make_pair(current_str, current.second + 1));
                        dict.erase(current_str);
                    }
                    current_str[i] = recover;
                }
            }
        }
        return 0;
    }
};
