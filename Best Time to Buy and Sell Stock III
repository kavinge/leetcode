/*
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
*/

#include <iostream>
#include <vector>
using namespace std;

int maxProfit(vector<int> &prices) {
        int n=prices.size();
        if(n<2) return 0;
        int* dp=new int[n+1]();
        int highest=prices[n-1];
        
        for(int i=n-2;i>0;i--){
            highest=max(highest,prices[i]);
            dp[i]=max(dp[i+1],highest-prices[i]);
        }
        int lowest=prices[0];
        int maxProfit=0;
        for(int i=1;i<n;i++){
            lowest=min(lowest,prices[i]);
            dp[i]=max(dp[i-1],prices[i]-lowest);
            maxProfit=max(maxProfit,dp[i]+dp[i+1]);
        }
        return maxProfit;
}
