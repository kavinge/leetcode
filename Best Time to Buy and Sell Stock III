/*
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
*/

#include <iostream>
#include <vector>
using namespace std;

int maxProfit(vector<int> &prices) {
    if(prices.size()<2)
       return 0;
    int result=0;
    vector<int> left;
    vector<int> right;
    int low=prices[0],cur=0;
    left.push_back(0);
    for(int i=1;i<prices.size();i++){
        int temp=prices[i]-low;
        if(temp>0){
            if(temp>cur){
                cur=temp;
            }
        }else{
            low=prices[i];
        }
        left.push_back(cur);
    }
    int high=prices[prices.size()-1];
    right.push_back(0);
    cur=0;
    for(int j=prices.size()-2;j>=0;j--){
        int temp=high-prices[j];
        if(temp>0){
            if(temp>cur){
                cur=temp;
            }
        }else{
            high=prices[j];
        }
        right.push_back(cur);
    }

    for(int k=1;k<prices.size();k++){
        int temp=left[k];
        if((prices.size()-k-1)>0){
            temp+=right[prices.size()-k-1];
        }
        if(temp>result){
            result=temp;
        }
    }
    return result;

}
int main()
{
    vector<int> p;
    p.push_back(1);
    p.push_back(2);
    cout << maxProfit(p) << endl;
    return 0;
}
