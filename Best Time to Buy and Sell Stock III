/*
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
*/

class Solution {
public:
    int maxProfit(vector<int> &prices) {
        int n = prices.size();
        if(n<2) return 0;
        vector<int> dp(n, 0);
        int left_min = prices[0];
        for(int i = 1; i<n; i++){
            left_min = min(left_min, prices[i]);
            dp[i] = max(dp[i-1], prices[i] - left_min);
        }
        int profit = dp[n-1], right_max = prices[n-1];
        for(int i = n-2; i>1; i--){
            right_max = max(right_max, prices[i]);
            profit = max(profit, right_max - prices[i] + dp[i-1]);
        }
        return profit;
    }
};
