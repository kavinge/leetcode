/**
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.
**/

#include <iostream>
#include <vector>
using namespace std;

int minimumTotal(vector<vector<int> > &triangle) {
    int m=triangle.size();
    int n;
    for(int x=m-2;x>=0;x--){
        n=triangle[x].size();
        for(int y=0;y<n;y++){
            triangle[x][y]+=min(triangle[x+1][y],triangle[x+1][y+1]);
        }
    }
    return triangle[0][0];
}

