/*
Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].
*/

#include <iostream>
#include <vector>
using namespace std;

vector<vector<int> > result;

void helper(vector<int> &current,vector<int> &num,int index,int n){
    if(index>=n) return;
    int size=num.size();
    for(int i=0;i<size;i++){
        current[index]=num[i];
        num.erase(num.begin()+i);
        if(index==n-1){
            result.push_back(current);
        }else{
            helper(current,num,index+1,n);
        }
        num.insert(num.begin()+i,current[index]);
    }
}

vector<vector<int> > permute(vector<int> &num) {
    result.clear();
    int n=num.size();
    if(n==0) return result;
    vector<int> current(n,0);
    helper(current,num,0,n);
    return result;
}
