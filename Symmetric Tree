/*
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following is not:

    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.

confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.
*/

class Solution {
public:
    bool dfs(TreeNode *left,TreeNode *right){
        if(left==NULL||right==NULL){
            return left==NULL&&right==NULL;
        }
        if(left->val!=right->val){
            return false;
        }
        return dfs(left->left,right->right)&&dfs(left->right,right->left);
    }
    
    bool isSymmetric(TreeNode *root) {
        if(root==NULL) return true;
        return dfs(root->left,root->right);
    }
};
