/*
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:

[
  [15,7]
  [9,20],
  [3],
]
*/

#include <iostream>
#include <vector>
using namespace std;


/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > levelOrderBottom(TreeNode *root) {
        vector<vector<int> > result;
        if(root==NULL) return result;
        queue<TreeNode* > parent;
        result.push_back(vector<int>({root->val}));
        parent.push(root);
        while(!parent.empty()){
            int n=parent.size();
            vector<int> level;
            for(int i=0;i<n;i++){
                TreeNode *p=parent.front();
                if(p->left){
                    level.push_back(p->left->val);
                    parent.push(p->left);
                }
                if(p->right){
                    level.push_back(p->right->val);
                    parent.push(p->right);
                }
                parent.pop();
            }
            if(level.size()>0)
                result.insert(result.begin(),level);
        }
        return result;
        
    }
};
