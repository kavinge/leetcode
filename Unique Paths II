/**
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,

There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

Note: m and n will be at most 100.
**/
#include <iostream>
#include <vector>
using namespace std;

int a[100][100]={{0}};

int helper(vector<vector<int> > &abstacleGrid,int m,int n){
    if(m<0||n<0) return 0;
    if(abstacleGrid[m][n]==1) return 0;
    if(a[m][n]!=0) return a[m][n];
    int s1=0,s2=0;
    if(m-1>=0){
        s1=helper(abstacleGrid,m-1,n);
        a[m-1][n]=s1;
    }
    if(n-1>=0){
        s2=helper(abstacleGrid,m,n-1);
        a[m][n-1]=s2;
    }
    a[m][n]=s1+s2;
    return a[m][n];

}

int uniquePathsWithObstacles(vector<vector<int> > &obstacleGrid) {
    int m=obstacleGrid.size();
    int n=obstacleGrid[0].size();
    return helper(obstacleGrid,m-1,n-1);
}
