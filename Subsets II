/*
Given a collection of integers that might contain duplicates, S, return all possible subsets.

Note:

Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
For example,
If S = [1,2,2], a solution is:

[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]
*/

class Solution {
public:
    vector<vector<int> > result;
    vector<int> temp;
    vector<vector<int> > subsetsWithDup(vector<int> &S) {
        result.clear();
        sort(S.begin(),S.end());
        for(int i=0; i<=S.size(); i++){
            helper(S,i,0,0);    
        }
        return result;
    }
    void helper(vector<int> &s, int n, int count, int index){
        if(count==n){
            result.push_back(temp);
            return ;
        }
        for(int i=index;i<=s.size()-n+count;i++){
            if(i!=index&&s[i-1]==s[i]) continue;
            temp.push_back(s[i]);
            helper(s,n,count+1,i+1);
            temp.pop_back();
        }
    }
};
