/*
Follow up for problem "Populating Next Right Pointers in Each Node".

What if the given tree could be any binary tree? Would your previous solution still work?

Note:

You may only use constant extra space.
For example,
Given the following binary tree,

         1
       /  \
      2    3
     / \    \
    4   5    7
After calling your function, the tree should look like:

         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \    \
    4-> 5 -> 7 -> NULL
*/
#include <iostream>
using namespace std;

struct TreeLinkNode {
    int val;
    TreeLinkNode *left, *right, *next;
    TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
};

void connect(TreeLinkNode *root) {
    if(root==NULL) return;
    list<TreeLinkNode*> nodes;
    nodes.push_back(root);
    list<TreeLinkNode*>::iterator li=nodes.begin();
    while(li!=nodes.end()){
        list<TreeLinkNode*>::iterator ie=nodes.end();
        ie--;
        while(li!=ie){
            if((*li)->left) nodes.push_back((*li)->left);
            if((*li)->right) nodes.push_back((*li)->right);
            (*li)->next=*(++li);
        }
        if((*li)->left) nodes.push_back((*li)->left);
        if((*li)->right) nodes.push_back((*li)->right);
        li++;
    }
}

