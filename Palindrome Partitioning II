/*
Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

For example, given s = "aab",
Return 1 since the palindrome partitioning ["aa","b"] could be produced using 1 cut.
*/

#include <iostream>
using namespace std;

int result=0x7fffffff;

bool isPalindrome(string &s,int left,int right){
    while(left<right){
        if(s[left++]!=s[right--]){
            return false;
        }
    }
    return true;
}

int minCut(string s) {
    int n=s.size();
    int i,j;
    int **matrix=new int*[n+1];
    for(i=0;i<n+1;i++){
        matrix[i]=new int[n+1]();
    }
    for(i=n;i>0;i--){
        for(j=i;j<n+1;j++){
            if(j==i){
                matrix[i][j]=1;
            }else if(j-i==1){
                matrix[i][j]=(s[i-1]==s[j-1]);
            }else{
                matrix[i][j]=(matrix[i+1][j-1]&&s[i-1]==s[j-1]);
            }
        }
    }

    int *dp=new int[n+1]();

    for(i=0;i<n+1;i++){
        dp[i]=i;
    }
    for(i=1;i<=n;i++){
        for(j=i;j>0;j--){
            if(matrix[j][i]){
                dp[i]=min(dp[i],dp[j-1]+1);
            }
        }
    }
    return dp[n]-1;
}

int main()
{
    cout << minCut("aab") << endl;
    return 0;
}
