/*
Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

For example, given s = "aab",
Return 1 since the palindrome partitioning ["aa","b"] could be produced using 1 cut.
*/

class Solution {
public:
    int minCut(string s) {
        int n =s.length();
        int **p = new int*[n];
        for(int i=0;i<n;i++){
            p[i] = new int[n]();
        }
        for(int i=n-1;i>=0;i--){
            p[i][i] = 1;
            for(int j=i+1;j<n;j++){
                p[i][j] = (s[i]==s[j])&&(j==i+1?true:p[i+1][j-1]);
            }
        }
        int *dp = new int[n]();
        for(int i=0;i<n;i++){
            dp[i] = p[0][i]?0:i;
            for(int j=1;j<=i;j++){
                if(p[j][i]) dp[i] = min(dp[i],dp[j-1]+1);
            }
        }
        return dp[n-1];
        
    }
};
