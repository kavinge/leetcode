/*
Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
*/

class Solution {
public:
    ListNode *swapPairs(ListNode *head) {
        ListNode *first = NULL, **current = &first;
        while(head!=NULL&&head->next!=NULL){
            *current = swap(head);
            current = &(head->next);
            head = head->next;
        }
        return first==NULL?head:first;
    }
    
    ListNode *swap(ListNode* first){
        ListNode * next = first->next;
        first->next = next->next;
        next->next = first;
        return next;
    }
};
