/*
Given a binary tree, find the maximum path sum.

The path may start and end at any node in the tree.

For example:
Given the below binary tree,

       1
      / \
     2   3
Return 6.
*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int maxPathSum(TreeNode *root) {
        if(root==NULL) return 0;
        int sum=0;
        return dpHelper(root,sum);
    }
    int dpHelper(TreeNode* root,int &sum){
        if(root==NULL){
            sum=0x80000000;
            return sum;
        }
        sum=root->val;
        int leftSum,rightSum;
        int left=dpHelper(root->left,leftSum);
        int right=dpHelper(root->right,rightSum);
        int maxChild=max(leftSum,rightSum);
        int minChild=min(leftSum,rightSum);
        sum+=(maxChild>0?maxChild:0);
        return max(max(left,right),minChild>0?sum+minChild:sum); 
    }
};
