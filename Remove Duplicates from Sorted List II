/*
Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

For example,
Given 1->2->3->3->4->4->5, return 1->2->5.
Given 1->1->1->2->3, return 2->3.
*/

#include <iostream>
using namespace std;
struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};

ListNode *deleteDuplicates(ListNode *head) {
    ListNode *result=NULL;
    ListNode *pre=NULL;
    while(head!=NULL){
        if(head->next==NULL||head->val!=head->next->val){
            if(pre==NULL){
                pre=head;
                result=head;
            }else{
                pre->next=head;
                pre=pre->next;
            }

        }
        while(head->next!=NULL&&head->next->val==head->val){
            head=head->next;
        }
        head=head->next;
    }
    if(pre!=NULL) pre->next=NULL;
    return result;
}

int main()
{
    ListNode a(1);
    ListNode b(1);
    a.next=&b;
    deleteDuplicates(&a);
    cout << "Hello world!" << endl;
    return 0;
}
