/*
Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:

All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, � , ak) must be in non-descending order. (ie, a1 ? a2 ? � ? ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 10,1,2,7,6,1,5 and target 8, 
A solution set is: 
[1, 7] 
[1, 2, 5] 
[2, 6] 
[1, 1, 6] 
*/

class Solution {
public:
    vector<vector<int> > result;
    void helper(vector<int> &num, int target,int index,vector<int> &current){
        for(int i=index;i<num.size();i++){
            if(i!=index&&num[i]==num[i-1]) continue;
            current.push_back(num[i]);
            if(num[i]==target){
                result.push_back(current);
            }else if(num[i]>target){
                current.pop_back();
                break;
            }else{
                helper(num,target-num[i],i+1,current);
            }
            current.pop_back();
        }
    }
    vector<vector<int> > combinationSum2(vector<int> &num, int target) {
        result.clear();
        sort(num.begin(),num.end());
        vector<int> current;
        helper(num,target,0,current);
        return result;
    }
};
