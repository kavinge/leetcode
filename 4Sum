/*
Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:

Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ? b ? c ? d)
The solution set must not contain duplicate quadruplets.
    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

    A solution set is:
    (-1,  0, 0, 1)
    (-2, -1, 1, 2)
    (-2,  0, 0, 2)
*/

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
vector<vector<int> > threeSum(vector<int> &num,int target) {

    vector<vector<int> > result;
    if(num.size()<4){
        return result;
    }
    sort(num.begin(),num.end());
    int i,j,left,right,sum;
    for(i=0;i<=num.size()-4;i++){
        if(i!=0&&num[i-1]==num[i]){

            continue;
        }
        for(j=i+1;j<=num.size()-3;j++){
            if(j!=i+1&&num[j-1]==num[j]){

                continue;
            }
            left=j+1;right=num.size()-1;
            while(left<right){
                sum=num[i]+num[j]+num[left]+num[right];
                if(sum==target){
                    vector<int> temp;
                    temp.push_back(num[i]);
                    temp.push_back(num[j]);
                    temp.push_back(num[left]);
                    temp.push_back(num[right]);
                    result.push_back(temp);
                    if(right-left>1){
                        do{
                            left++;
                        }while(right-left>0&&num[left-1]==num[left]);
                    }else{
                        break;
                    }
                    if(num[left-1]==num[left]){
                        break;
                    }
                }else if(sum<target){
                    if(right-left>1){
                        left++;
                    }else{
                        break;
                    }
                }else{
                    if(right-left>1){
                        right--;
                    }else{
                        break;
                    }
                }
            }
        }
    }

    return result;
}
int main()
{
   vector<int> num;
    num.push_back(-1);
    num.push_back(0);
    num.push_back(1);
    num.push_back(2);
    num.push_back(-1);
    num.push_back(-4);
    threeSum(num,-1);
    cout << "Hello world!" << endl;
    return 0;
}
