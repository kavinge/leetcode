/*
Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
*/

#include <iostream>

using namespace std;
struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 };
 
bool postOrder(TreeNode *root,int &depth){
        if(root==NULL){
            depth=0;
            return true;
        }
        int left=0,right=0;
        if(!postOrder(root->left,left)){
            return false;
        }
        if(!postOrder(root->right,right)){
            return false;
        }

        depth=(left>right?left:right)+1;

        if(left-right>1||left-right<-1){
            return false;
        }else{
            return true;
        }
    }
    bool isBalanced(TreeNode *root) {
        if(root==NULL){
            return true;
        }
        int depth=0;
        return postOrder(root,depth);
    }
