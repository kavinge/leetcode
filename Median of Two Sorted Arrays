/*
There are two sorted arrays A and B of size m and n respectively. 
Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
*/

#include <iostream>
using namespace std;

double findMedianSortedArrays(int A[], int m, int B[], int n) {
    if(m==0){
        if(n%2==0){
            return ((double)(B[n/2]+B[n/2-1]))/2;
        }else{
            return B[n/2];
        }
    }
    if(n==0){
        if(m%2==0){
            return ((double)(A[m/2]+A[m/2-1]))/2;
        }else{
            return A[m/2];
        }
    }
    int index=(m+n)/2;
    int div=index/2;
    int i,j;
    if(m<n){
        i=min(div,m-1);
        j=index-i-1;
    }else{
        j=min(div,n-1);
        i=index-j-1;
    }
    while(i>=0&&j>=0&i<m&&j<n){
        bool move=false;
        if(j+1<n){
            if(A[i]>B[j+1]){
                //yi dong
                div/=2;
                if(div==0){
                    div=1;
                }
                i-=div;
                j=index-i-1;
                move=true;
            }
        }
        if(!move&&i+1<m){
            if(B[j]>A[i+1]){
                div/=2;
                if(div==0){
                    div=1;
                }
                j-=div;
                i=index-j-1;
                move=true;
            }
        }
        if(!move){
            break;
        }
    }
    int select1=0x80000000,select2=0x80000000;
    if(i>=0&&i<m){
        select1=A[i];
        if(i>0){
            select2=A[i-1];
        }
    }
    if(j>=0&&j<n){
        if(select1<B[j]){
            select2=select1;
            if(j>0){
                select2=max(select2,B[j-1]);
            }
            select1=B[j];
        }else{
            select2=max(B[j],select2);
        }

    }
    if((m+n)%2==1){
        return select1;
    }else{
        return ((double)(select1+select2))/2;
    }
}

int main()
{
    int A[]={100000};
    int B[]={100001};

    cout << findMedianSortedArrays(A,1,B,1)<< endl;
    return 0;
}
