/*
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
*/


//implement heap 

void adjust(vector<ListNode*> &array,int i,int n){
    int j=2*i+1;
    while(j<n){
        if(j+1<n&&array[j+1]->val<array[j]->val){
            j++;
        }
        if(array[i]->val>array[j]->val){
            swap(array[i],array[j]);
            i=j;
            j=2*i+1;
        }else{
            break;
        }
    }
}

void build(vector<ListNode*> &array, int n){
    for(int i=n/2-1;i>=0;i--){
        adjust(array,i,n);
    }
}

ListNode *mergeKLists(vector<ListNode *> &lists) {
    ListNode *head=NULL;
    ListNode *pre=NULL;
    int n=lists.size();
    for(int i=n-1;i>=0;i--){
        if(lists[i]==NULL){
            swap(lists[i],lists[n---1]);
        }
    }
    build(lists,n);
    while(n>0){
        if(lists[0]==NULL){
            break;
        }
        if(head==NULL){
            head=pre=lists[0];
        }else{
            pre->next=lists[0];
            pre=pre->next;
        }
        lists[0]=lists[0]->next;
        if(lists[0]==NULL){
            swap(lists[0],lists[n-1]);
            n--;
        }
        if(n>1){
            adjust(lists,0,n);
        }
    }
    return head;
}
