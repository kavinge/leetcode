/*
Given two numbers represented as strings, return multiplication of the numbers as a string.

Note: The numbers can be arbitrarily large and are non-negative.
*/

#include <iostream>
class Solution {
public:
    string multiply(string num1, string num2) {
        reverse(num1.begin(),num1.end());
        reverse(num2.begin(),num2.end());
        while(num1.back()<'0'||num1.back()>'9'){
            num1.pop_back();
        }
        while(num2.back()<'0'||num2.back()>'9'){
            num2.pop_back();
        }
        string result="0";
        for(int i=0;i<num1.length();i++){
            int a1 = num1[i]-'0';
            result = addToResult(result,string(i,'0')+multiply_char(a1,num2));
        }
        while(result.length()>1&&result.back()=='0'){
            result.pop_back();
        }
        reverse(result.begin(),result.end());
        return result;
    }
    string multiply_char(int a1,string &num2){
        string m = "";
        int carry =0;
        for(int i=0;i<num2.length();i++){
            int multi = a1*(num2[i]-'0')+carry;
            m += (multi%10)+'0';
            carry = multi/10;
        }
        return m.length()==0||carry>0?m+=(carry+'0'):m;
    }
    string addToResult(string &s1,string s2){
        int l1 =s1.length(),l2=s2.length(),carry=0;
        string result ="";
        for(int i=0;i<l1||i<l2;i++){
            int sum =carry;
            sum += (i<l1?s1[i]-'0':0);
            sum+= (i<l2?s2[i]-'0':0);
            result += (sum%10+'0');
            carry = sum/10;
        }
        return carry>0?result+=(carry+'0'):result;
    }
};
