/*
Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.
*/

class Solution {
public:
    bool isScramble(string s1, string s2) {
        int n = s1.length();
        if(s2.length()!=n) return false;
        vector<vector<vector<char> > > dp(n,vector<vector<char> >(n, vector<char>(n+1,0)));
        for(int i=n-1;i>=0;i--){
            for(int j=n-1;j>=0;j--){
                dp[i][j][0] = 1;
                dp[i][j][1] = s1[i]==s2[j]?1:0;
                for(int k=2;k<=n-max(i,j);k++){
                    for(int l = 1; l<k; l++){
                        if((dp[i][j][l]&&dp[i+l][j+l][k-l])||(dp[i][j+k-l][l]&&dp[i+l][j][k-l])){
                            dp[i][j][k] = 1;
                        }
                    }
                }
            }
        }
        return dp[0][0][n];
        
    }
};






// recursive algorithm
class Solution {
public:
    
    int n;
    bool isScramble(string s1, string s2) {
        n = s1.length();
        if(s2.length() != n) return false;
        vector<vector<vector<char> > > dp(n, vector<vector<char> >(n, vector<char>(n+1, '0')));
        return helper(s1, 0, s2, 0, n, dp);
    }
    
    bool helper(string &s1, int i1, string &s2, int i2, int l, vector<vector<vector<char> > > &dp){
        if(dp[i1][i2][l] == '0'){
            if(s1.substr(i1, l) == s2.substr(i2, l)){
                dp[i1][i2][l] = '1';
                return true;
            }
            for(int i = 1; i<l; i++){
                if(helper(s1, i1, s2, i2, i, dp) && helper(s1, i1 + i, s2, i2+i, l-i, dp) 
                || helper(s1, i1, s2, i2+l-i, i, dp) && helper(s1, i1+i, s2, i2, l-i, dp) ){
                    dp[i1][i2][l] = '1';
                    break;
                }
                dp[i1][i2][l] = '2';
            }
        }
        return dp[i1][i2][l] == '1';
        
    }
};
