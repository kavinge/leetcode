/*
Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.
*/

#include <iostream>
#include <string>
using namespace std;

bool equal(string &s1,int l1,int r1,string &s2,int l2,int r2){
    int c1[26]={0};
    int c2[26]={0};
    for(int i=l1;i<=r1;i++){
        c1[s1[i]-'a']++;
    }
    for(int i=l2;i<=r2;i++){
        c2[s2[i]-'a']++;
    }
    for(int i=0;i<26;i++){
        if(c1[i]!=c2[i]) return false;
    }
    return true;
}

bool helper(string &s1,int l1,int r1,string &s2,int l2,int r2){
    if(r1==l1) return s1[l1]==s2[l2];
    if(!equal(s1,l1,r1,s2,l2,r2)) return false;
    int m1,m2;
    for(int i=0;i<r1-l1;i++){
        m1=l1+i;m2=l2+i;
        if((helper(s1,l1,m1,s2,l2,m2)&&helper(s1,m1+1,r1,s2,m2+1,r2))
            ||(helper(s1,l1,m1,s2,r2+l2-m2,r2)&&helper(s1,m1+1,r1,s2,l2,r2+l2-m2-1))){
            return true;
        }
    }
    return false;

}

bool isScramble(string s1, string s2) {
    int n1=s1.size();
    int n2=s2.size();
    if(n1!=n2) return false;
    if(n1==0&&n2==0) return true;
    return helper(s1,0,n1-1,s2,0,n2-1);
}

int main()
{
    cout <<isScramble("abb","bab") << endl;
    return 0;
}
