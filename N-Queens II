/*
Follow up for N-Queens problem.

Now, instead outputting board configurations, return the total number of distinct solutions.
*/

#include <iostream>
using namespace std;

int result;

bool isValidate(int *current,int index,int val){
    for(int i=0;i<index;i++){
        if(current[i]==val-(index-i)||current[i]==val+(index-i)){
            return false;
        }
    }
    return true;
}

void helper(int index,int n,int *current){
    if(index>=n) return;
    for(int i=index;i<n;i++){
        if(isValidate(current,index,current[i])){
            swap(current[index],current[i]);
            if(index==n-1){
               result++;
               return;
            }else{
                helper(index+1,n,current);
                swap(current[index],current[i]);
            }
        }
    }
}

int totalNQueens(int n) {
    result=0;
    if(n<=0){
        return result;
    }
    int* current=new int[n];
    for(int i=0;i<n;i++){
        current[i]=i;
    }
    helper(0,n,current);
    delete[] current;
    return result;
}

int main()
{
    cout << totalNQueens(8) << endl;
    return 0;
}
