/*
The n-queens puzzle is the problem of placing n queens on an nï¿½n chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
*/

class Solution {
public:
    vector<vector<string> >result;

    bool isValidate(int *current,int index,int val){
        for(int i=0;i<index;i++){
            if(current[i]==val-(index-i)||current[i]==val+(index-i)){
                return false;
            }
        }
        return true;
    }
    
    void helper(int index,int n,int *current){
        if(index>=n) return;
        for(int i=index;i<n;i++){
            if(isValidate(current,index,current[i])){
                swap(current[index],current[i]);
                if(index==n-1){
                   vector<string> ss;
                   for(int i=0;i<n;i++){
                        string temp(n,'.');
                        temp[current[i]]='Q';
                        ss.push_back(temp);
                   }
                   result.push_back(ss);
                   return;
                }else{
                    helper(index+1,n,current);
                    swap(current[index],current[i]);
                }
            }
        }
    }

    vector<vector<string> > solveNQueens(int n) {
        result.clear();
        int* current=new int[n];
        for(int i=0;i<n;i++){
            current[i]=i;
        }
        string temp(n,'.');
        helper(0,n,current);
        delete[] current;
        return result;
    }
};
