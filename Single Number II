/**
Given a string S and a string T, count the number of distinct subsequences of T in S.

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

Here is an example:
S = "rabbbit", T = "rabbit"

Return 3.
**/

class Solution {
public:
    int singleNumber(int A[], int n) {
        int bit[32] = {0};
        for(int i=0; i<n; i++){
            for(int j = 0; j<32; j++){
                bit[j] += ((A[i] & (1<<j))!=0);
            }
        }
        int single = 0;
        for(int i = 0; i<32; i++){
            if(bit[i]%3){
                single |= (1<<i);
            }
        }
        return single;
    }
};
