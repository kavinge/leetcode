/*
Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

For example, given array S = {-1 2 1 -4}, and target = 1.

The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
*/
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
int cmp(const void* arg1,const void* arg2){
      int* i1=( int*)arg1;
      int* i2=( int*)arg2;
     return *i1-*i2;
}
int threeSumClosest(vector<int> & num, int target) {
    int i,left,right,sum=num[0]+num[1]+num[2];
    sort(num.begin(),num.end());
    for(i=0;i<=num.size()-3;i++){
        left=i+1;right=num.size()-1;
        int temp;
        while(left<right){
            temp=num[i]+num[left]+num[right];
            if(abs(target-sum)>abs(target-temp)){
                sum=temp;
            }
            if(temp==target){
                return target;
            }else if(temp<target){
                if(right-left>1){
                    left++;
                }else{
                    break;
                }
            }else{
                if(right-left>1){
                    right--;
                }else{
                    break;
                }
            }
        }
    }
    return sum;

}
int main()
{
    vector<int> num;

    num.push_back(-1);
    num.push_back(2);
    num.push_back(1);
    num.push_back(-4);
    cout<<threeSumClosest(num,1);
    return 0;
}
