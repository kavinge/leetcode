/**
Implement wildcard pattern matching with support for '?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") ? false
isMatch("aa","aa") ? true
isMatch("aaa","aa") ? false
isMatch("aa", "*") ? true
isMatch("aa", "a*") ? true
isMatch("ab", "?*") ? true
isMatch("aab", "c*a*b") ? false
**/

class Solution {
public:
    bool isMatch(const char *s, const char *p) {
        int i = 0, j = 0, asterisk_i = -1, asterisk_j = -1, match = 0;
        while(s[i]!='\0'){
            if(s[i]==p[j] || p[j]=='?'){
                i++;j++;
            }else if(p[j]=='*'){
                asterisk_j = j++;
                asterisk_i = i;
                match = 0;
            }else if(asterisk_j>=0){
                j = asterisk_j + 1;
                i = asterisk_i + ++match;
            }else{
                return false;
            }
        }
        while(p[j]=='*') j++;
        return p[j] == '\0';
    }
};
