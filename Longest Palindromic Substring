/*
Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, 
and there exists one unique longest palindromic substring.
*/

class Solution {
public:
    
    string longestPalindrome(string s) {
        int longest = 0, start = 0;
        for(int i = 0; i < s.length(); i++){
            int left = helper(s, i, i);
            int len = 1 + (i - left)*2;
            if(longest < len){
                longest = len;
                start = left;
            }
            if(i+1 == s.length()) break;
            left = helper(s, i, i+1);
            len = (i - left + 1)<<1;
            if(longest < len){
                longest = len;
                start = left;
            }
        }
        return s.substr(start, longest);
    }
    
    int helper(string &s, int x, int y){
        while(x>=0 && y<s.length() && s[x] == s[y]){
            x--;
            y++;
        }
        return x+1;
    }
    
    
};
