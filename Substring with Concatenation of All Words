#include <iostream>
#include <vector>
/**
You are given a string, S, and a list of words, L, that are all of the same length.
Find all starting indices of substring(s) in S that is a concatenation of each word in L exactly once and without any intervening characters.

For example, given:
S: "barfoothefoobarman"
L: ["foo", "bar"]

You should return the indices: [0,9].
(order does not matter).
**/

class Solution {
public:
    vector<int> findSubstring(string S, vector<string> &L) {
        vector<int> result;
        int ln = L.size(), sn = S.length();
        if(ln==0||sn==0) return result;
        map<string,int> lm;

        for(int i=0;i<ln;i++){
            lm[L[i]] ++;
        }
        
        int word_len = L[0].length();
        
        for(int i=0; i<sn-ln*word_len+1; i++){
            map<string,int> tm;
            int count = 0;
            for(int j=i;j<sn;j+=word_len){
                string t = S.substr(j,word_len);
                if(lm[t]>tm[t]){
                    tm[t]++;
                    if(++count==ln){
                        result.push_back(i);
                        continue;
                    }
                }else{
                    break;
                }
            }
            
        }
              
        return result;
    }
};
