/**
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
**/

class Solution {
public:
    bool isValidBST(TreeNode *root) {
        int last = 0x80000000;
        return dfs(root, last);
    }
    bool dfs(TreeNode *root, int &last){
        if(root==NULL) return true;
        if(!dfs(root->left, last)) return false;
        if(root->val<=last) return false;
        last = root->val;
        return dfs(root->right, last);
    }
};
