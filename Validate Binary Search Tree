/**
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
**/

#include <iostream>
using namespace std;

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 };
 
bool dfsHelper(TreeNode *root,int &pre){
    if(root==NULL) return true;
    if(!dfsHelper(root->left,pre))return false;
    if(root->val<=pre) return false;
    pre=root->val;
    return dfsHelper(root->right,pre);
}

bool isValidBST(TreeNode *root) {
    if(root==NULL) return true;
    int pre=1<<31;
    return dfsHelper(root,pre);
}
