/*
Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in place.

Follow up:
Did you use extra space?
A straight forward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?
*/

#include <iostream>
#include <vector>
using namespace std;

//额外数组 O(m+n)空间复杂度
void setZeroes(vector<vector<int> > &matrix) {
    int m=matrix.size();
    if(m==0) return;
    int n=matrix[0].size();
    if(n==0) return;
    int *mm=new int[m]();
    int *nn=new int[n]();
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            if(matrix[i][j]==0){
                mm[i]=1;
                nn[j]=1;
            }
        }
    }
    for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            if(mm[i]==1||nn[j]==1){
                matrix[i][j]=0;
            }
        }
    }
}
//O(1)空间复杂度
//使用第一行记录是否本列置0
void setZeroes2(vector<vector<int> > &matrix) {
    int m=matrix.size();
    if(m==0) return;
    int n=matrix[0].size();
    if(n==0) return;
    int i,j;bool setZeroForFirstLine=false;
    for(j=0;j<n;j++){
        if(matrix[0][j]==0) setZeroForFirstLine=true;
    }
    for(i=1;i<m;i++){
        bool row=false;
        for(j=0;j<n;j++){
            if(matrix[i][j]==0){
                matrix[0][j]=0;
                row=true;
            }
        }
        if(row){
            for(j=0;j<n;j++)
              matrix[i][j]=0;
        }
    }
    for(j=0;j<n;j++){
        if(matrix[0][j]==0){
            for(i=1;i<m;i++){
                matrix[i][j]=0;
            }
        }
    }
    if(setZeroForFirstLine){
        for(j=0;j<n;j++){
            matrix[0][j]=0;
        }
    }
}
