/*
Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].
*/

//递归算法
vector<int> result;
bool rr=false;

void getBorder(int A[],int left,int right,int target,int status){
    if(left>right) return ;
    int middle=(left+right)/2;
    if(A[middle]==target){
        result[status]=middle;
        if(status==0){
            if(!rr){
                rr=true;
                result[1]=middle;
                getBorder(A,middle+1,right,target,1);
            }
            getBorder(A,left,middle-1,target,status);
        }else{
             getBorder(A,middle+1,right,target,status);
        }
    }else if(A[middle]<target){
        getBorder(A,middle+1,right,target,status);
    }else{
        getBorder(A,left,middle-1,target,status);
    }
}

vector<int> searchRange(int A[], int n, int target) {
    rr=false;
    result.clear();
    result.push_back(-1);
    result.push_back(-1);
    result[0]=-1;result[1]=-1;
    if(n==0) return result;
    getBorder(A,0,n-1,target,0);
    return result;
}

//非递归算法

class Solution {
public:
    vector<int> searchRange(int A[], int n, int target) {
        int start = -1, end = -1;
        int left = 0, right = n-1;
        while(left<=right){
            int middle = left + ((right-left)>>1);
            if(A[middle]==target){
                if(middle==0||A[middle-1]!=target){
                    start = middle;
                    break;
                }
                right = middle-1;
            }else if(A[middle]<target){
                left = middle+1;
            }else{
                right = middle-1;
            }
        }
        if(start == -1) return vector<int>({-1,-1});
        left = start; right = n-1;
        while(left<=right){
            int middle = left + ((right-left)>>1);
            if(A[middle]==target){
                if(middle==n-1||A[middle+1]!=target){
                    end = middle;
                    break;
                }
                left = middle+1;
            }else if(A[middle]<target){
                left = middle+1;
            }else{
                right = middle-1;
            }
        }
        return vector<int>({start, end});
        
    }
};
