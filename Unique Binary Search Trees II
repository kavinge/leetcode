/**
Given n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   **/

#include <iostream>
#include <vector>
using namespace std;

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 };
 
class Solution {
public:

   vector<TreeNode *> helper(int start,int end){
        vector<TreeNode *> result;
        if(start>end){
            result.push_back(NULL);
            return result;
        }
        for(int i=start;i<=end;i++){

            vector<TreeNode *> lefts=helper(start,i-1);
            vector<TreeNode *> rights=helper(i+1,end);
            for(int l=0;l<lefts.size();l++){
                for(int r=0;r<rights.size();r++){
                    TreeNode *head=new TreeNode(i);
                    head->left=lefts[l];
                    head->right=rights[r];
                    result.push_back(head);
                }
            }
        }
        return result;
    }
    vector<TreeNode *> generateTrees(int n) {

        return helper(1,n);
    }
};

int main()
{
    Solution s;
    s.generateTrees(3);
    cout << "Hello world!" << endl;
    return 0;
}
