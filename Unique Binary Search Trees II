/**
Given n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   **/

class Solution {
public:
    
    vector<TreeNode *> generateTrees(int n) {
        return dfs(1,n);
    }
    vector<TreeNode*> dfs(int left, int right){
        vector<TreeNode *> result;
        if(left>right){
            result.push_back(NULL);
            return result;
        }
        for(int x=left;x<=right;x++){
            vector<TreeNode*> lefts = dfs(left,x-1);
            vector<TreeNode*> rights = dfs(x+1,right);
            for(int i=0;i<lefts.size();i++){
                for(int j=0;j<rights.size();j++){
                    TreeNode * root = new TreeNode(x);
                    root->left = lefts[i];
                    root->right = rights[j];
                    result.push_back(root);
                }
            }
        }
        return result;
    }    
};
