/*
Write a program to solve a Sudoku puzzle by filling the empty cells.

Empty cells are indicated by the character '.'.

You may assume that there will be only one unique solution.

A sudoku puzzle...

...and its solution numbers marked in red.
*/

class Solution {
public:
    void solveSudoku(vector<vector<char> > &board) {
        int row[9] = {0};
        int col[9] = {0};
        int block[9] = {0};
        
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                if(board[i][j]!='.'){
                    row[i]|= 1<<(board[i][j]-'0');
                    col[j]|= 1<<(board[i][j]-'0');
                    int b = (i/3)*3+(j/3);
                    block[b]|= 1<<(board[i][j]-'0');
                }
            }
        }
        dfs(board,row,col,block,0,0);
    }
    
    bool dfs(vector<vector<char> > &board, int* row, int* col, int* block, int x, int y){
        if(x>=9) return true;
        if(board[x][y]=='.'){
            for(int t =1; t<=9; t++){
                int mark = (1<<t);
                int b = (x/3)*3+(y/3);
                if((row[x]&mark)==0 && (col[y]&mark)==0 && (block[b]&mark)==0){
                    board[x][y] = t+'0';
                    row[x]|=mark;
                    col[y]|=mark;
                    block[b]|=mark;
                    if(dfs(board,row,col,block,y==8?x+1:x,y==8?0:y+1)) return true;
                    board[x][y]='.';
                    row[x]^=mark;
                    col[y]^=mark;
                    block[b]^=mark;
                }
            }
        }else{
            return dfs(board,row,col,block,y==8?x+1:x,y==8?0:y+1);
        }
    }
};
