/*
Given a string S and a string T, count the number of distinct subsequences of T in S.

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

Here is an example:
S = "rabbbit", T = "rabbit"

Return 3.
*/

class Solution {
public:
    int numDistinct(string S, string T) {
        int sn = S.size(), tn = T.size();
        if(tn == 0) return 1;
        if(sn == 0) return 0;
        vector<vector<int> > dp(sn, vector<int>(tn, 0));
        for(int i = 0; i<sn; i++){
            for(int j = 0; j<=i && j<tn; j++){
                if(i>0) dp[i][j] = dp[i-1][j];
                if(S[i] == T[j]) dp[i][j] += j == 0? 1: dp[i-1][j-1];
            }
        }
        return dp[sn-1][tn-1];
        
    }
};
