/*
Given a string S and a string T, count the number of distinct subsequences of T in S.

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

Here is an example:
S = "rabbbit", T = "rabbit"

Return 3.
*/

#include <iostream>
using namespace std;

int helper(const string &S,const string &T,int i,int j){
    int **matrix=new int *[i+1];
    int k,l;
    for(k=0;k<i+1;k++){
        matrix[k]=new int[j+1]();
    }
    for(k=0;k<=i;k++){
        matrix[k][0]=1;
    }
    for(k=1;k<=i;k++){
        for(l=1;l<=j;l++){
            int temp=matrix[k-1][l];
            if(S[k-1]==T[l-1]){
                temp+=matrix[k-1][l-1];
            }
            matrix[k][l]=temp;
        }
    }
    int count=matrix[i][j];
    delete[] matrix;
    return count;
}

int numDistinct(string S, string T) {
    int ss=S.size();
    int ts=T.size();
    return helper(S,T,ss,ts);
}
