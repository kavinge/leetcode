/*
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].
*/


//----------------O(logn)---------------


/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
     
    vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) {
        vector<Interval> result;
        int n=intervals.size();
        if(n==0){
            result.push_back(newInterval);
            return result;
        }
        int start_p=findPosition(intervals,newInterval.start,0,n-1);
        int end_p=findPosition(intervals,newInterval.end,0,n-1);
        result.insert(result.end(), intervals.begin(), intervals.begin()+start_p+1);
        int left=newInterval.start,right=newInterval.end;
        if(end_p+1<n&&intervals[end_p+1].start<=right)
            end_p++;
        if(start_p+1>=0&&start_p+1<n)
            left=min(left,intervals[start_p+1].start);
        if(end_p>=0&&end_p<n)
            right=max(right,intervals[end_p].end);
        result.push_back(Interval(left,right));
        result.insert(result.end(),intervals.begin()+end_p+1,intervals.end());
        return result;
    }

    int findPosition(vector<Interval> &intervals, int val,int left,int right){
        if(left>right) return min(left,right);
        int middle=left+(right-left)/2;
        if(intervals[middle].end==val) return middle-1;
        if(intervals[middle].end>val){
            return findPosition(intervals,val,left,middle-1);
        }else{
            return findPosition(intervals,val,middle+1,right);
        }
    }

};
