/*
Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].
*/

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Interval {
    int start;
    int end;
    Interval() : start(0), end(0) {}
    Interval(int s, int e) : start(s), end(e) {}
 };
 
 struct cmp {
    bool operator ()(const Interval& a, const Interval& b) {
		return a.start < b.start;
	}
} cmp;

vector<Interval> merge(vector<Interval> &intervals) {
        vector<Interval> result;
        if(intervals.size()==0){
            return result;
        }
        sort(intervals.begin(),intervals.end(),cmp);
        int left=intervals[0].start;
        int right=intervals[0].end;
        for(int i=1;i<intervals.size();i++){
            Interval cu=intervals[i];
            if(cu.start>=left&&cu.start<=right){
                right=max(right,cu.end);
            }else{
                Interval temp(left,right);
                result.push_back(temp);
                left=cu.start;
                right=cu.end;
            }

        }
        Interval temp(left,right);
        result.push_back(temp);
        return result;
}
