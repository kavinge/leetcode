/*
Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].
*/

class Solution {
public:
    struct cmp{
        bool operator()(Interval i1, Interval i2){
            return i1.start < i2.start;
        }    
    } compare;
    
    vector<Interval> merge(vector<Interval> &intervals) {
        vector<Interval> result;
        int n = intervals.size();
        if(n == 0) return result;
        sort(intervals.begin(), intervals.end(), compare);
        int last_start = intervals[0].start, last_end = intervals[0].end;
        for(int i = 1; i<n; i++){
            Interval cu = intervals[i];
            if(cu.start <= last_end){
                last_end = max(last_end, cu.end);
            }else{
                result.push_back(Interval(last_start, last_end));
                last_start = cu.start;
                last_end = cu.end;
            }
        }
        result.push_back(Interval(last_start, last_end));
        return result;
    }
};
